service: mtgml-global-data

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-python-requirements

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true
  exclude:
    - data/**
    - notebooks/**
  include:
    - ../../libs/**

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  tracing:
    lambda: true

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiRootResourceId

  environment:
    stage: ${self:custom.stage}
    resources_stage: ${self:custom.resources_stage}
    USERS_TABLE: ${self:custom.usersTable}
    SUBSCRIPTIONS_TABLE: ${self:custom.subscriptionsTable}
    GLOBAL_DECKS_TABLE: ${self:custom.globalDecksTable}
    GLOBAL_CARDS_TABLE: ${self:custom.globalCardsTable}
    USER_DECKS_TABLE: ${self:custom.userDecksTable}
    USER_CARDS_TABLE: ${self:custom.userCardsTable}
    CARD_SEARCH_DOMAIN_ENDPOINT: ${self:custom.cardSearchDomainEndpoint}

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        # Dynamo Table Actions
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        # Dynamo Stream Actions
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
        # Elasticsearch Actions
        - es:ESHttpPost
        - es:ESHttpPut
        - es:ESHttpDelete
        - es:ESHttpGet
        - es:ESHttpHead
        # Lambda Actions (for master to call worker)
        - lambda:InvokeFunction
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - 'Fn::ImportValue': ${self:custom.resources_stage}-UsersTableArn
        - 'Fn::ImportValue': ${self:custom.resources_stage}-SubscriptionsTableArn
        - 'Fn::ImportValue': ${self:custom.resources_stage}-GlobalDecksTableArn
        - 'Fn::ImportValue': ${self:custom.resources_stage}-GlobalCardsTableArn
        - 'Fn::ImportValue': ${self:custom.resources_stage}-UserDecksTableArn
        - 'Fn::ImportValue': ${self:custom.resources_stage}-UserCardsTableArn
        - 'Fn::ImportValue': ${self:custom.resources_stage}-CardSearchDomainArn
        - "*"

functions:
  cards_master:
    handler: update_global_cards.master
    memorySize: 512
    timeout: 900
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - schedule: cron(0 6 * * ? *)
      - http:
          path: global_cards_master
          method: get
          cors: true
          authorizer: aws_iam
  cards_worker:
    handler: update_global_cards.worker
    memorySize: 512
    timeout: 900
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: global_cards_worker
          method: post
          cors: true
          authorizer: aws_iam
  decks:
    handler: update_global_decks.main
    memorySize: 512
    timeout: 900
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - schedule: cron(0 6 * * ? *)
      - http:
          path: update_global_decks
          method: get
          cors: true
          authorizer: aws_iam
  sync_card_search:
    handler: sync_card_search.main
    memorySize: 512
    timeout: 60
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::ImportValue: ${self:custom.resources_stage}-GlobalCardsTableStreamArn
