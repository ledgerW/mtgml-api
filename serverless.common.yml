custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  resources_stages:
    prod: prod
    dev: dev
  resources_stage: ${self:custom.resources_stages.${self:custom.stage}, self:custom.resources_stages.dev}
  stripe_public_keys:
    dev: ${env:STRIPE_PUBLIC_KEY_TEST}
    prod: ${env:STRIPE_PUBLIC_KEY_PROD}
  stripe_secret_keys:
    dev: ${env:STRIPE_SECRET_KEY_TEST}
    prod: ${env:STRIPE_SECRET_KEY_PROD}
  # Set the table name here so we can use it while testing locally
  usersTable: ${self:custom.stage}-users
  subscriptionsTable: ${self:custom.stage}-subscriptions
  globalDecksTable: ${self:custom.stage}-global-decks
  globalCardsTable: ${self:custom.stage}-global-cards
  userDecksTable: ${self:custom.stage}-user-decks
  userCardsTable: ${self:custom.stage}-user-cards
  cardSearchDomainEndpoint:
    'Fn::ImportValue': ${self:custom.resources_stage}-CardSearchDomainEndpoint
  pythonRequirements:
    layer:
      name: ${self:service}

lambdaPolicyXRay:
  Effect: Allow
  Action:
    - xray:PutTraceSegments
    - xray:PutTelemetryRecords
  Resource: "*"
