service: mtgml
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# frameworkVersion: "=X.X.X"

package:
  individually: true
#  include:
#    - include-me.py
#    - include-me-dir/**
  exclude:
    - data/**
    - notebooks/**

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-python-requirements

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  usersTable: ${self:custom.stage}-users
  subscriptionsTable: ${self:custom.stage}-subscriptions
  globalDecksTable: ${self:custom.stage}-global-decks
  globalCardsTable: ${self:custom.stage}-global-cards
  userDecksTable: ${self:custom.stage}-user-decks
  userCardsTable: ${self:custom.stage}-user-cards
  pythonRequirements:
    layer: true

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1

  environment:
    USERS_TABLE: ${self:custom.usersTable}
    SUBSCRIPTIONS_TABLE: ${self:custom.subscriptionsTable}
    GLOBAL_DECKS_TABLE: ${self:custom.globalDecksTable}
    GLOBAL_CARDS_TABLE: ${self:custom.globalCardsTable}
    USER_DECKS_TABLE: ${self:custom.userDecksTable}
    USER_CARDS_TABLE: ${self:custom.userCardsTable}
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
    STRIPE_SIGNING_SECRET: ${env:STRIPE_SIGNING_SECRET}

  tracing:
    apiGateway: true
    lambda: true

  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    # Restrict our IAM role permissions to
    # the specific table for the stage
    Resource:
      - "Fn::GetAtt": [ UsersTable, Arn ]
      - "Fn::GetAtt": [ SubscriptionsTable, Arn ]
      - "Fn::GetAtt": [ GlobalDecksTable, Arn ]
      - "Fn::GetAtt": [ GlobalDecksTable, Arn ]
      - "Fn::GetAtt": [ GlobalCardsTable, Arn ]
      - "Fn::GetAtt": [ UserDecksTable, Arn ]
      - "Fn::GetAtt": [ UserCardsTable, Arn ]
  - Effect: Allow
    Action:
      - xray:PutTraceSegments
      - xray:PutTelemetryRecords
    Resource: "*"

functions:
  create:
    handler: create.main
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: decks
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: decks/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: list.main
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: decks
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: decks/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: decks/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  payment:
    handler: payment.main
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: payment
          method: post
          cors: true
          authorizer: aws_iam
  subscribe:
    handler: subscribe.main
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: subscribe
          method: post
          cors: true
          authorizer: aws_iam
  checkout_complete:
    handler: checkout_complete.main
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: checkout_complete
          method: post
          cors: true

# CloudFormation resource template syntax
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-tables.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
